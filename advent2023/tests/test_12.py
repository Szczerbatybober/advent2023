import pytest
from advent2023.twelve import groups_to_5, list_to_5, result


def test_too_few_chars():
    pass


@pytest.mark.parametrize(
    ("line", "groups", "expected"),
    [
        ("###", (3,), 1),
        ("#.#", (1, 1), 1),
        ("###", (4,), 0),
        ("###", tuple([]), 0),
        ("...", tuple([]), 1),
        ("###...###...###", (3, 3, 3), 1),
        ("###...###...####", (3, 3, 3), 0),
    ],
)
def test_result_from_line(line, groups, expected):
    assert result(line, groups) == expected


@pytest.mark.parametrize(
    ("line", "groups", "expected"),
    [
        ("???", (3,), 1),
        ("????", (3,), 2),
        ("????", (1, 1), 3),
        ("????", (1,), 4),
        ("?????", (2, 2), 1),
        ("??????????", (1,), 10),
        ("??.??", (2, 2), 1),
        ("#?#??", (2, 2), 0),
        ("?#??", (2, 2), 0),
        ("###??", (2, 2), 0),
        ("???.###", (1, 1, 3), 1),
        (".??..??...?##.", (1, 1, 3), 4),
        ("?#?#?#?#?#?#?#?", (1, 3, 1, 6), 1),
        ("????.######..#####.", (1, 6, 5), 4),
        ("?###????????", (3, 2, 1), 10),
        (
            "???.###????.###????.###????.###????.###",
            (1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3),
            1,
        ),
        (
            "?#?#?#?#?#?#?#??#?#?#?#?#?#?#??#?#?#?#?#?#?#??#?#?#?#?#?#?#??#?#?#?#?#?#?#?",
            (1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6),
            1,
        ),
    ],
)
def test_result_from_line_with_questions(line, groups, expected):
    assert result(line, groups) == expected


@pytest.mark.parametrize(
    ("line", "expected"),
    [
        ("???.### 1,1,3", 1),
        (".??..??...?##. 1,1,3", 16384),
        ("?#?#?#?#?#?#?#? 1,3,1,6", 1),
        ("????.#...#... 4,1,1", 16),
        ("????.######..#####. 1,6,5", 2500),
        ("?###???????? 3,2,1", 506250),
    ],
)
def test_multiplied(line, expected):
    new_line = list_to_5(line)
    groups = groups_to_5(line)
    print(new_line, groups)
    assert result(new_line, groups) == expected


def test_to_5():
    assert (
        list_to_5("?###???????? 3,2,1")
        == "?###??????????###??????????###??????????###??????????###????????"
    )
